apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'

shadowJar {
    zip64 = true
}

mainClassName = 'no.habitats.corpus.spark.SparkUtil'

dependencies {
    compile project(':common')

    compile 'javax.mail:javax.mail-api:1.5.5'
    compile 'org.glassfish.jersey.core:jersey-server:2.22.2'
    compile 'org.glassfish.jersey.containers:jersey-container-servlet-core:2.22.2'
    compile 'org.glassfish.jersey.containers:jersey-container-servlet:2.22.2'

    // OpenNLP
    compile 'org.apache.opennlp:opennlp-tools:1.6.0' // POS tagging

    // Standford NPL
    compile fileTree('models/binary')
    compile('edu.stanford.nlp:stanford-corenlp:3.6.0') { exclude group: 'xml-apis' }
    compile ':stanford-corenlp-3.6.0-models@jar'
    compile 'com.google.protobuf:protobuf-java:2.6.1'
    compile 'com.google.guava:guava:19.0'
}

task pathingJar(type: Jar) {
    dependsOn configurations.runtime
    appendix = 'pathing'

    doFirst {
        manifest {
            // Build the Class-Path for absolute paths based on runtime dependencies.
            attributes "Class-Path": configurations.runtime.files.collect {
                it.toURL().toString().replaceFirst(/file:\/+/, '/')
            }.join(' ')
        }
    }
}

task corpus(type: JavaExec) {
    dependsOn compileScala, pathingJar
    // Class path is too long for Windows ... So got to bundle it in a jar
    doFirst { classpath = files("$buildDir/classes/main", "$buildDir/resources/main", "$projectDir/gsp-classes", pathingJar.archivePath) }
    main = 'no.habitats.corpus.spark.SparkUtil'
    jvmArgs = '-Xmx60g -Xms12g -XX:+UseConcMarkSweepGC'.tokenize(" ")
    args = 'job=computeDbAnnotations count=10'.tokenize(" ")
}
